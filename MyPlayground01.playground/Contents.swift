import UIKit

/*
 
 ในภาษา Swift คลาสเป็นประเภทข้อมูลแบบ Reference type เมื่อมีการกำหนดค่าให้กับตัวแปรหรือส่งเป็นพารามิเตอร์ให้กับฟังก์ชัน คลาสจะไม่ถูกคัดลอก แต่จะใช้การอ้างอิงไปยังอินสแตนซ์เดียวกัน
 
 */

// ตัวอย่างโค้ดด้านล่างแสดงให้เห็นถึงพฤติกรรมของ Reference type:
// สร้างคลาส VideoPlayer
class VideoPlayer {
   // กำหนดพร็อพเพอร์ตี้ resolution เป็นสตริงและมีค่าเริ่มต้นเป็นสตริงว่าง
   var resolution: String = ""
   // กำหนดพร็อพเพอร์ตี้ name เป็นสตริงและมีค่าเริ่มต้นเป็นสตริงว่าง
   var name: String = ""
   // กำหนดพร็อพเพอร์ตี้ frameRate เป็น Double และมีค่าเริ่มต้นเป็น 0.0
   var frameRate: Double = 0.0
}

// สร้างอินสแตนซ์ของคลาส VideoPlayer และกำหนดให้กับตัวแปร video
let video = VideoPlayer()
// กำหนดค่า "hd" ให้กับพร็อพเพอร์ตี้ resolution ของอินสแตนซ์ video
video.resolution = "hd"
// กำหนดค่า "10089" ให้กับพร็อพเพอร์ตี้ name ของอินสแตนซ์ video
video.name = "10089"
// กำหนดค่า 25.0 ให้กับพร็อพเพอร์ตี้ frameRate ของอินสแตนซ์ video
video.frameRate = 25.0

/*
 ในตัวอย่างนี้ เราสร้างคลาส VideoPlayer ที่มีพร็อพเพอร์ตี้ resolution, name, และ frameRate จากนั้นเราสร้างอินสแตนซ์ของคลาส VideoPlayer และกำหนดให้กับตัวแปร video

 เมื่อเรากำหนดค่าให้กับพร็อพเพอร์ตี้ของอินสแตนซ์ video การเปลี่ยนแปลงจะถูกบันทึกไว้ในอินสแตนซ์เดียวกัน เนื่องจากคลาสเป็น Reference type เมื่อมีการกำหนดค่าให้กับตัวแปร video จะไม่มีการคัดลอกอินสแตนซ์ แต่จะใช้การอ้างอิงไปยังอินสแตนซ์เดียวกันแทน

 นี่คือลักษณะสำคัญของ Reference type ในภาษา Swift ที่แตกต่างจาก Value type เช่น โครงสร้าง (Struct) หรือ Enum ซึ่งจะมีการคัดลอกเมื่อมีการกำหนดค่าหรือส่งเป็นพารามิเตอร์
 
 */
